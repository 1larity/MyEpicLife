package com.digitale.screens;import java.io.IOException;import com.badlogic.gdx.Gdx;import com.badlogic.gdx.Input.Keys;import com.badlogic.gdx.files.FileHandle;import com.badlogic.gdx.graphics.GL20;import com.badlogic.gdx.graphics.Texture;import com.badlogic.gdx.graphics.g2d.TextureRegion;import com.badlogic.gdx.scenes.scene2d.Actor;import com.badlogic.gdx.scenes.scene2d.Stage;import com.badlogic.gdx.scenes.scene2d.ui.Button;import com.badlogic.gdx.scenes.scene2d.ui.Button.ButtonStyle;import com.badlogic.gdx.scenes.scene2d.ui.CheckBox;import com.badlogic.gdx.scenes.scene2d.ui.Dialog;import com.badlogic.gdx.scenes.scene2d.ui.Image;import com.badlogic.gdx.scenes.scene2d.ui.ImageButton;import com.badlogic.gdx.scenes.scene2d.ui.ImageButton.ImageButtonStyle;import com.badlogic.gdx.scenes.scene2d.ui.Label;import com.badlogic.gdx.scenes.scene2d.ui.List;import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;import com.badlogic.gdx.scenes.scene2d.ui.SelectBox;import com.badlogic.gdx.scenes.scene2d.ui.Skin;import com.badlogic.gdx.scenes.scene2d.ui.Slider;import com.badlogic.gdx.scenes.scene2d.ui.SplitPane;import com.badlogic.gdx.scenes.scene2d.ui.Table;import com.badlogic.gdx.scenes.scene2d.ui.TextButton;import com.badlogic.gdx.scenes.scene2d.ui.TextField;import com.badlogic.gdx.scenes.scene2d.ui.TextField.TextFieldListener;import com.badlogic.gdx.scenes.scene2d.ui.Window;import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener.ChangeEvent;import com.badlogic.gdx.utils.Align;import com.digitale.database.AwardDef;import com.digitale.database.MELEvent;import com.digitale.myepiclife.DesktopTimer;import com.digitale.myepiclife.MyEpicLife;public class OptionsScreen extends MyEpicLifeScreen {	private String TAG = "OPTIONSSCREEN: ";	Stage stage;	final TextButton buttonClockOff;	final TextButton buttonToggleDebug;	/** icons **/	protected boolean doneflag = false;	private CustomDialog fileDialog;	public OptionsScreen() {		ImageButton buttonDone = null;		ImageButton buttonHelp = null;		try {			buttonDone = MyEpicLife.buttons.getButton("doneholo");			buttonHelp = MyEpicLife.buttons.getButton("helpholo");		} catch (ButtonNotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		stage = new Stage();		Gdx.input.setInputProcessor(stage);		DesktopTimer.setStage(stage);		ScreenTable buttontable = new ScreenTable();		buttonToggleDebug = new TextButton("Toggle Debug", MyEpicLife.uiSkin,				"toggle");		buttonToggleDebug.setColor(MyEpicLife.uiColour);		TextButton buttonExportFile = new TextButton("Export Data", MyEpicLife.uiSkin);		buttonExportFile.setColor(MyEpicLife.uiColour);		TextButton buttonImportFile = new TextButton("Import Data", MyEpicLife.uiSkin);		buttonImportFile.setColor(MyEpicLife.uiColour);		TextButton buttonMailFile = new TextButton("Mail Data", MyEpicLife.uiSkin);		buttonMailFile.setColor(MyEpicLife.uiColour);		buttonClockOff = new TextButton("Disable timer", MyEpicLife.uiSkin,				"toggle");		buttonClockOff.setColor(MyEpicLife.uiColour);		final SelectBox<String> dropdownFPSLimit = new SelectBox<String>(MyEpicLife.uiSkin);		Label labelSkinSelect = new Label("App Skin", MyEpicLife.uiSkin);		Label labelFPSLimit = new Label("FPS limit:Reduces battery usage.", MyEpicLife.uiSkin);		TextButton buttonIntentTest = new TextButton("Google cal event test", MyEpicLife.uiSkin);		buttonIntentTest.setColor(MyEpicLife.uiColour);		buttonToggleDebug.setChecked(MyEpicLife.DEBUG);		buttonClockOff.setChecked(DesktopTimer.timerEnabled);		final SelectBox<String> dropdownSkinStyle = new SelectBox<String>(MyEpicLife.uiSkin);		dropdownSkinStyle.setItems("MelTek", "Holo", "LibGDX");		dropdownSkinStyle.setSelected(SkinManager.selectedSkin);		dropdownFPSLimit.setItems("10","20", "30","40","50", "60");		dropdownFPSLimit.setSelected(Integer.toString(MyEpicLife.selectedFPS));		Window window = new ScreenWindow("Options");		buttontable.row().fill().expandX().expandY();		buttontable.add(buttonToggleDebug);		buttontable.add(buttonExportFile);		buttontable.add(buttonImportFile);		buttontable.row().fill().expandX();		buttontable.add(labelFPSLimit);		buttontable.add(dropdownFPSLimit);		buttontable.row().fill().expandX();		buttontable.add(buttonIntentTest);		buttontable.add(buttonMailFile);		buttontable.row().fill().expandX();		buttontable.add(labelSkinSelect);		buttontable.add(dropdownSkinStyle);		buttontable.add(buttonClockOff);		buttontable.row().fill().expandX();		buttontable.add(buttonHelp);		buttontable.add(buttonDone);		buttontable.layout();		window.add(buttontable).fill().expandX().expandY().align(Align.bottom);		window.pack();		stage.addActor(window);		dropdownSkinStyle.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				SkinManager.selectedSkin = dropdownSkinStyle.getSelected();				SkinManager.skinSetup();			}		});		dropdownFPSLimit.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				MyEpicLife.selectedFPS = Integer.valueOf(dropdownFPSLimit.getSelected());			}		});		buttonIntentTest.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				MyEpicLife.callEventIntent("NEWEVENT");			}		});		buttonToggleDebug.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				if (buttonToggleDebug.isChecked()) {					MyEpicLife.DEBUG = true;				} else {					MyEpicLife.DEBUG = false;				}			}		});		buttonClockOff.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				if (buttonClockOff.isChecked()) {					DesktopTimer.timerEnabled = true;				} else {					DesktopTimer.timerEnabled = true;				}			}		});		buttonDone.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				MyEpicLife.gameMode = 2;				doneflag = true;			}		});		buttonHelp.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				MyEpicLife.gameMode = 8;				doneflag = true;			}		});		buttonExportFile.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				FileHandle from = Gdx.files.local("eventDb.json");				try {					from.copyTo(Gdx.files.external("/Download/eventDb.json"));				} catch (Exception e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				showDialogDbFileop("export");			}		});		buttonImportFile.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				if (MyEpicLife.DEBUG)					System.out.println(TAG + "import from"							+ Gdx.files.external("/Download/eventDb.json"));				FileHandle from = Gdx.files.external("/Download/eventDb.json");				from.copyTo(Gdx.files.local("eventDb.json"));				showDialogDbFileop("import");			}		});		buttonMailFile.addListener(new ChangeListener() {			public void changed(ChangeEvent event, Actor actor) {				// TODO handler for android and desktop mailing				/*				 * Intent intent = new Intent(Intent.ACTION_SEND);				 * intent.setType("text/html");				 * intent.putExtra(Intent.EXTRA_EMAIL,				 * "emailaddress@emailaddress.com");				 * intent.putExtra(Intent.EXTRA_SUBJECT, "Subject");				 * intent.putExtra(Intent.EXTRA_TEXT, "I'm email body.");				 * 				 * startActivity(Intent.createChooser(intent, "Send Email"));				 */			}		});	}	private void showDialogDbFileop(final String mode) {		fileDialog = new CustomDialog("File Operation") {			protected void result(Object object) {				// just an information dialog, no need to handle user input			}		};		if (MyEpicLife.DEBUG)			fileDialog.debugAll();		// set grammar of award screen		if (MyEpicLife.eventName.equals("event")) {			if (mode.equals("import")) {				fileDialog.text("Event data imported from /Download/eventDb.json");			} else if (mode.equals("export")) {				fileDialog.text("Event data exported to /Download/eventDb.json");			}			fileDialog.setSize(Gdx.graphics.getWidth() / 3, Gdx.graphics.getHeight() / 3);			fileDialog.button("OK", true).setSize(300, 300);			fileDialog.key(Keys.ENTER, true);			fileDialog.getContentTable().layout();			fileDialog.getButtonTable().layout();			fileDialog.pack();			fileDialog.show(stage);		}	}	@Override	public void render(float delta) {		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);		stage.act(Math.min(Gdx.graphics.getDeltaTime(), 1 / 30f));		stage.draw();		if (DesktopTimer.timerEnabled){			buttonClockOff.getLabel().setText("Disable timer");		}else{			buttonClockOff.getLabel().setText("Enable timer");		}		if (MyEpicLife.DEBUG){			buttonToggleDebug.getLabel().setText("Disable debug");		}else{			buttonToggleDebug.getLabel().setText("Enable debug");		}	}	@Override	public void resize(int width, int height) {		stage.getViewport().update(width, height, true);	}	@Override	public void update(float delta) {		// TODO Auto-generated method stub	}	@Override	public void draw(float delta) {		// TODO Auto-generated method stub	}	@Override	public boolean isDone() {		return doneflag;	}	@Override	public void dispose() {		stage.dispose();	}	@Override	public void setDone(boolean b) {		// TODO Auto-generated method stub	}}